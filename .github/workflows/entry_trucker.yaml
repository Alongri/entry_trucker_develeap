name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  IMAGE_NAME: flask-app

jobs:
  build-and-test:
    name: 🧪 Build & Unit Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set version tag
        id: set-version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//')
          if [ -z "$VERSION" ]; then
            VERSION="0.1.0-dev-${GITHUB_SHA::7}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.set-version.outputs.version }} .

      - name: Run container
        run: |
          docker run -d -p 5000:5000 --name $IMAGE_NAME $IMAGE_NAME:${{ steps.set-version.outputs.version }}
          sleep 5

      - name: Test endpoint with curl
        run: |
          curl -f http://localhost:5000

      - name: Save Docker image as artifact
        run: |
          docker save $IMAGE_NAME:${{ steps.set-version.outputs.version }} | gzip > flask-app.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-docker-image
          path: flask-app.tar.gz

  e2e-tests:
    name: 🔍 E2E Tests
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-docker-image

      - name: Load Docker image
        run: |
          gunzip -c flask-app.tar.gz | docker load

      - name: Run docker-compose
        run: |
          docker compose up -d
          sleep 5

      - name: Test endpoint with curl
        run: |
          curl -f http://localhost:5000/

      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  push-to-ecr:
    name: 🚀 Push to AWS ECR
    needs: [build-and-test, e2e-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-docker-image

      - name: Load Docker image
        run: |
          gunzip -c flask-app.tar.gz | docker load

      - name: Set version tag
        id: set-version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//')
          if [ -z "$VERSION" ]; then
            VERSION="0.1.0-dev-${GITHUB_SHA::7}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 \
            | docker login --username AWS --password-stdin 884394270539.dkr.ecr.ap-south-1.amazonaws.com
      - name: Build Docker image
        run: |
          docker build -t development/entry-trucker:$VERSION .
      - name: Tag and push Docker image
        run: |
          docker tag development/entry-trucker:latest 884394270539.dkr.ecr.ap-south-1.amazonaws.com/development/entry-trucker:$VERSION
          docker push 884394270539.dkr.ecr.ap-south-1.amazonaws.com/development/entry-trucker:$VERSION

