name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  IMAGE_NAME: flask-app

jobs:
  build-and-test:
    name: 🧪 Build & Unit Test
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      version: ${{ steps.bump-version.outputs.version }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Bump patch version
        id: bump-version
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_VERSION="v1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$(echo $LATEST_TAG | sed 's/^v//')"
            PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.bump-version.outputs.version }} .

      - name: Run container
        run: |
          docker run -d -p 5000:5000 --name $IMAGE_NAME $IMAGE_NAME:${{ steps.bump-version.outputs.version }}
          sleep 5

      - name: Test endpoint with curl
        run: |
          curl -f http://localhost:5000

      - name: Save Docker image as artifact
        run: |
          docker save $IMAGE_NAME:${{ steps.bump-version.outputs.version }} | gzip > flask-app.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-docker-image
          path: flask-app.tar.gz

  e2e-tests:
    name: 🔍 E2E Tests
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-docker-image

      - name: Load Docker image
        run: |
          gunzip -c flask-app.tar.gz | docker load

      - name: Run docker-compose
        run: |
          docker compose up -d
          sleep 5

      - name: Test endpoint with curl
        run: |
          curl -f http://localhost:5000/

      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  push-to-ecr:
    name: 🚀 Push to AWS ECR
    needs: [build-and-test, e2e-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-docker-image

      - name: Load Docker image
        run: |
          gunzip -c flask-app.tar.gz | docker load

      - name: Use version from build job
        run: echo "VERSION=${{ needs.build-and-test.outputs.version }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin 884394270539.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t development/entry-trucker:$VERSION .

      - name: Tag and push Docker image
        run: |
          docker tag development/entry-trucker:$VERSION 884394270539.dkr.ecr.ap-south-1.amazonaws.com/development/entry-trucker:$VERSION
          docker push 884394270539.dkr.ecr.ap-south-1.amazonaws.com/development/entry-trucker:$VERSION

  deploy:
    name: 🚀 Deploy to EC2
    needs: [push-to-ecr]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: SSH - Configure AWS CLI and login to ECR
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            aws configure set aws_access_key_id '${{ secrets.AWS_ACCESS_KEY_ID }}'
            aws configure set aws_secret_access_key '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            aws configure set default.region '${{ secrets.AWS_REGION }}'
            aws ecr get-login-password --region '${{ secrets.AWS_REGION }}' \
              | docker login --username AWS --password-stdin 884394270539.dkr.ecr.ap-south-1.amazonaws.com
          EOF

      - name: SSH - Stop running Docker containers
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/entry-tracker
            docker compose down
          EOF

      - name: SSH - Update .env version variable
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd /home/ubuntu/entry-tracker
            sed -i 's/^VERSION=.*/VERSION=${{ needs.build-and-test.outputs.version }}/' .env
          EOF

      - name: SSH - Pull latest image from ECR
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/entry-tracker
            docker compose pull
          EOF

      - name: SSH - Start containers with new version
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/entry-tracker
            docker compose up -d
          EOF

